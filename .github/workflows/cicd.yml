on: [ push ]

jobs:
#  deploy-config:
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      packages: write
#    steps:
#      - uses: actions/checkout@v3
#      - name: Create ENV file
#        run: |
#          touch .env
#          echo NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }} >> .env
#          echo NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }} >> .env
#          echo NEXT_PUBLIC_MAPBOX_TOKEN=${{ secrets.MAPBOX_TOKEN }} >> .env
#      - name: Create cache
#        uses: actions/cache@v3
#        with:
#          path: |
#            node_modules
#            .env
#            /home/runner/.cache/Cypress
#          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
#  integration-test:
#    runs-on: ubuntu-latest
#    needs: deploy-config
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/cache@v3
#        with:
#          path: |
#            node_modules
#            .env
#            /home/runner/.cache/Cypress
#          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
#      - run: npm run e2e:headless
#      - uses: actions/upload-artifact@v3
#        if: success()
#        with:
#          name: e2e-tests
#          path: cypress/videos
#  build-and-push:
#    runs-on: ubuntu-latest
#    needs: integration-test
#    if: success()
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/cache@v3
#        with:
#          path: |
#            node_modules
#            .env
#            /home/runner/.cache/Cypress
#          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
#      - name: Login to GitHub Container Registry
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - name: Install dependencies and build
#        run: |
#          npm install
#          npm run build
#
#      - name: Build and push
#        env:
#          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
#          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
#          NEXT_PUBLIC_MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}
#        uses: docker/build-push-action@v4
#        #--build-arg Ã  passer en mode manuelle
#        with:
#          build-args: |
#            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}
#            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
#            NEXT_PUBLIC_MAPBOX_TOKEN=${{ secrets.MAPBOX_TOKEN }}
#          push: true
#          tags: ghcr.io/projet-collaboratif-cda22/web-next-js-app:development
  pull-ec2:
    runs-on: ubuntu-latest
#    needs: build-and-push
#    if: success()
    steps:
      - name: pull ec2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_KEY_EC2 }}
          HOST: ${{ secrets.DEV_HOST }}
          USER: ${{ secrets.DEV_USERNAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} '
          docker run ghcr.io/projet-collaboratif-cda22/web-next-js-app:development 
          '